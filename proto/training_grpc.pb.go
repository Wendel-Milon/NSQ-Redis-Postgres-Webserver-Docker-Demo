// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: training.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrainerClient is the client API for Trainer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainerClient interface {
	Train(ctx context.Context, opts ...grpc.CallOption) (Trainer_TrainClient, error)
	FullRandom(ctx context.Context, opts ...grpc.CallOption) (Trainer_FullRandomClient, error)
}

type trainerClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainerClient(cc grpc.ClientConnInterface) TrainerClient {
	return &trainerClient{cc}
}

func (c *trainerClient) Train(ctx context.Context, opts ...grpc.CallOption) (Trainer_TrainClient, error) {
	stream, err := c.cc.NewStream(ctx, &Trainer_ServiceDesc.Streams[0], "/proto.Trainer/train", opts...)
	if err != nil {
		return nil, err
	}
	x := &trainerTrainClient{stream}
	return x, nil
}

type Trainer_TrainClient interface {
	Send(*Training) error
	CloseAndRecv() (*Summary, error)
	grpc.ClientStream
}

type trainerTrainClient struct {
	grpc.ClientStream
}

func (x *trainerTrainClient) Send(m *Training) error {
	return x.ClientStream.SendMsg(m)
}

func (x *trainerTrainClient) CloseAndRecv() (*Summary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Summary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trainerClient) FullRandom(ctx context.Context, opts ...grpc.CallOption) (Trainer_FullRandomClient, error) {
	stream, err := c.cc.NewStream(ctx, &Trainer_ServiceDesc.Streams[1], "/proto.Trainer/fullRandom", opts...)
	if err != nil {
		return nil, err
	}
	x := &trainerFullRandomClient{stream}
	return x, nil
}

type Trainer_FullRandomClient interface {
	Send(*Nums) error
	Recv() (*Nums, error)
	grpc.ClientStream
}

type trainerFullRandomClient struct {
	grpc.ClientStream
}

func (x *trainerFullRandomClient) Send(m *Nums) error {
	return x.ClientStream.SendMsg(m)
}

func (x *trainerFullRandomClient) Recv() (*Nums, error) {
	m := new(Nums)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TrainerServer is the server API for Trainer service.
// All implementations must embed UnimplementedTrainerServer
// for forward compatibility
type TrainerServer interface {
	Train(Trainer_TrainServer) error
	FullRandom(Trainer_FullRandomServer) error
	mustEmbedUnimplementedTrainerServer()
}

// UnimplementedTrainerServer must be embedded to have forward compatible implementations.
type UnimplementedTrainerServer struct {
}

func (UnimplementedTrainerServer) Train(Trainer_TrainServer) error {
	return status.Errorf(codes.Unimplemented, "method Train not implemented")
}
func (UnimplementedTrainerServer) FullRandom(Trainer_FullRandomServer) error {
	return status.Errorf(codes.Unimplemented, "method FullRandom not implemented")
}
func (UnimplementedTrainerServer) mustEmbedUnimplementedTrainerServer() {}

// UnsafeTrainerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainerServer will
// result in compilation errors.
type UnsafeTrainerServer interface {
	mustEmbedUnimplementedTrainerServer()
}

func RegisterTrainerServer(s grpc.ServiceRegistrar, srv TrainerServer) {
	s.RegisterService(&Trainer_ServiceDesc, srv)
}

func _Trainer_Train_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TrainerServer).Train(&trainerTrainServer{stream})
}

type Trainer_TrainServer interface {
	SendAndClose(*Summary) error
	Recv() (*Training, error)
	grpc.ServerStream
}

type trainerTrainServer struct {
	grpc.ServerStream
}

func (x *trainerTrainServer) SendAndClose(m *Summary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *trainerTrainServer) Recv() (*Training, error) {
	m := new(Training)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Trainer_FullRandom_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TrainerServer).FullRandom(&trainerFullRandomServer{stream})
}

type Trainer_FullRandomServer interface {
	Send(*Nums) error
	Recv() (*Nums, error)
	grpc.ServerStream
}

type trainerFullRandomServer struct {
	grpc.ServerStream
}

func (x *trainerFullRandomServer) Send(m *Nums) error {
	return x.ServerStream.SendMsg(m)
}

func (x *trainerFullRandomServer) Recv() (*Nums, error) {
	m := new(Nums)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Trainer_ServiceDesc is the grpc.ServiceDesc for Trainer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Trainer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Trainer",
	HandlerType: (*TrainerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "train",
			Handler:       _Trainer_Train_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "fullRandom",
			Handler:       _Trainer_FullRandom_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "training.proto",
}
